#name: CI/CD Pipeline
#
#on:
#  push:
#    branches: [ main ]  # develop 브랜치에 push가 일어날 때 실행
#  pull_request:
#    branches: [ main ]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3  # 저장소 코드 체크아웃
#
#      - name: Set up JDK 21  # Java 개발 킷 설정
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      # gradle caching - 빌드 시간 향상
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Make application.yml  # application.yml 파일 생성
#        run: |
#          mkdir ./src/main/resources
#          cd ./src/main/resources
#          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
#        shell: bash
#
#      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
#        run: chmod +x gradlew
#
#      - name: Build with Gradle  # Gradle을 사용하여 프로젝트 빌드
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: build
#
#      - name: Upload build artifact  # 빌드된 아티팩트 업로드
#        uses: actions/upload-artifact@v3
#        with:
#          name: umc7thServer
#          path: build/libs/*.jar
#
#  deploy:
#    needs: build  # build 작업이 성공적으로 완료된 후 실행
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
#        uses: actions/download-artifact@v3
#        with:
#          name: umc7thServer
#          path: build/libs/
#
#      - name: Deploy to EC2  # EC2에 배포
#        env:
#          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
#          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#        run: |
#          echo "$EC2_SSH_KEY" > private_key.pem
#          chmod 600 private_key.pem
#          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
#          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer.jar
#          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
#            pgrep java | xargs -r kill -15  # 기존에 실행 중인 Java 프로세스 종료
#            sleep 10
#            nohup java -jar /home/$EC2_USERNAME/umc7thServer.jar > app.log 2>&1 &  # 새 버전 애플리케이션 실행
#          "
#          rm -f private_key.pem  # 민감한 정보 삭제

name: CI/CD Pipeline

on:
  pull_request:  # PR 생성 또는 업데이트 시 트리거
    branches: [ main ]
  push:  # main 브랜치로 push될 때 트리거
    branches: [ main ]

jobs:
  # 빌드 및 테스트 작업 (PR 이벤트에서 실행)
  build-and-test:
    if: github.event_name == 'pull_request'  # PR 생성/업데이트 시에만 실행
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3  # 저장소 코드 체크아웃

      - name: Set up JDK 21  # Java 개발 킷 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.yml  # application.yml 파일 생성
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash

      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Build with Gradle  # Gradle 빌드 및 테스트
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Upload build artifact  # 빌드된 아티팩트 업로드 (PR 테스트를 위해 저장)
        uses: actions/upload-artifact@v3
        with:
          name: cicdtestrepo
          path: build/libs/*.jar

  # 배포 작업 (main 브랜치로 push될 때 실행)
  deploy:
    if: github.event_name == 'push'  # push 이벤트일 때만 실행
    runs-on: ubuntu-latest
    needs: build-and-test  # build-and-test 작업이 완료된 후 실행

    steps:
      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
        uses: actions/download-artifact@v3
        with:
          name: cicdtestrepo
          path: build/libs/

      - name: Deploy to EC2  # EC2에 배포
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/cicdtestrepo.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15  # 기존에 실행 중인 Java 프로세스 종료
            sleep 10
            nohup java -jar /home/$EC2_USERNAME/cicdtestrepo.jar > app.log 2>&1 &  # 새 버전 애플리케이션 실행
          "
          rm -f private_key.pem  # 민감한 정보 삭제
